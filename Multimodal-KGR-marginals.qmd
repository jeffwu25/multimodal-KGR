---
title: "Multimodal-KGR-2-v3"
author: "Jeffrey Wu"
format: html
---

```{r}
library(readxl)
library(tidyr)
library(lubridate)
library(xml2)
library(sf)
library(tidyverse)
library(lubridate)
library(stats)
library(geosphere)
library(scales)
library(reshape2)
library(huge)
library(INLA)
library(brinla)
library(dplyr)
```

# Model the two modalities (excess nonnegative mortality counts due to heat & avg max temperature during Jun-Sept 2016-2018) with KGR models

```{r}
multimodal_df = readRDS("multimodal_df.rds")

multimodal_df = multimodal_df %>%
  mutate(excess_deaths = as.numeric(excess_deaths))

multimodal_df = multimodal_df %>% dplyr::filter(Year == 2018)


n = length(unique(multimodal_df$region))
t = length(unique(multimodal_df$date))
regions = unique(multimodal_df$region)

# Reformat responses to cumulative change 
deaths_delta_all = c()
temp_pctdelta_all = c()
cumdelta_deaths = c()
cumpctdelta_temp = c()

for (i in regions){
  region_df = multimodal_df %>% dplyr::filter(region == i) %>% select(excess_deaths,avg_max_temp)
  deaths_delta = region_df$excess_deaths[1]
  temp_delta = region_df$avg_max_temp[1]
  
  for(j in 2:122){
    deaths_delta[j] = region_df$excess_deaths[j] - region_df$excess_deaths[j-1]
    temp_delta[j] = 100*(region_df$avg_max_temp[j] - region_df$avg_max_temp[j-1])/region_df$avg_max_temp[j-1]
  }
  
  deaths_delta_all = c(deaths_delta_all,deaths_delta)
  temp_pctdelta_all = c(temp_pctdelta_all,temp_delta)
  
  cumdelta_deaths = c(cumdelta_deaths,cumsum(deaths_delta))
  cumpctdelta_temp = c(cumpctdelta_temp,cumsum(temp_delta))
}

deaths_delta = deaths_delta_all
temp_pctdelta = temp_pctdelta_all

multimodal_df = cbind(multimodal_df,deaths_delta,cumdelta_deaths,temp_pctdelta,cumpctdelta_temp)

multimodal_df$deaths_delta[multimodal_df$deaths_delta < 0] = 0
multimodal_df$cumdelta_deaths[multimodal_df$cumdelta_deaths < 0] = 0

# Organize df better
multimodal_df = multimodal_df %>% arrange(date,region)

multimodal_df$time = rep(1:122,each = 9)

multimodal_df <- multimodal_df %>%
  mutate(id = case_when(
    region == "North East"               ~ 1,
    region == "North West"              ~ 2,
    region == "Yorkshire And The Humber"~ 3,
    region == "East Midlands"           ~ 4,
    region == "West Midlands"           ~ 5,
    region == "East"                    ~ 6,
    region == "London"                  ~ 7,
    region == "South East"              ~ 8,
    region == "South West"              ~ 9
  ))

# Create an id column for each spatiotemporal index 
multimodal_df$id2 = c(1:nrow(multimodal_df))

# Create an intercept column for each county
for (i in 1:n) {
  region = regions[i]
  multimodal_df[[paste0("Intercept_", i)]] <- ifelse(multimodal_df$region == region,
                                                    1, NA)
}

multimodal_df$excess_deaths[multimodal_df$excess_deaths < 0] = 0
```


# Excess mortality

```{r}
# ggplot(multimodal_df, aes(x = date, y = cumdelta_deaths, color = region)) +
#   geom_line() + labs(title = "Cumulative Changes in Daily Deaths by Region",
#        x = "Date", y = "Cumulative Sum of Delta Deaths") +
#   theme_minimal() +
#   theme(legend.position = "bottom")

# ggplot(multimodal_df, aes(x = date, y = deaths_delta)) +
#   geom_line() +
#   facet_wrap(~ region, scales = "free_x") +
#   labs(title = "Changes in Daily Deaths by Region",
#        x = "Date", y = "Delta Deaths") +
#   theme_minimal() +
#   theme(legend.position = "bottom")

ggplot(multimodal_df, aes(x = date, y = excess_deaths)) +
  geom_line() +
  facet_wrap(~ region, nrow = 3, ncol = 3, scales = "free_x") +
  labs(title = "Daily Excess Mortality due to Heat by Region",
       x = "Date", y = "Excess Deaths") +
  theme_minimal() +
  theme(legend.position = "bottom")
```


## Estimate a graph with HUGE

```{r}
graph_df1 = matrix(nrow = t, ncol = n)

for (i in 1:n){
  region_deaths = multimodal_df %>% dplyr::filter(region == regions[i]) %>% select(excess_deaths) 
  graph_df1[,i] = region_deaths$excess_deaths
}

#Graph learning w HUGE
out.glasso = huge(graph_df1,lambda = seq(0.2,0.01,by=-0.01),method="glasso")

glasso.stars = huge.select(out.glasso,criterion = "stars",stars.thresh = 0.1)
glasso.ric = huge.select(out.glasso,criterion = "ric")
glasso.ebic = huge.select(out.glasso,criterion = "ebic")

plot(glasso.stars)
plot(glasso.ric)
plot(glasso.ebic)

est_graph_deaths = glasso.ebic$refit
est_graph_deaths

#Identify which clusters/nodes are the most connected on the graph i.e. has the most association with the other nodes 
degree_connectivity1 = data.frame(colSums(est_graph_deaths))
colnames(degree_connectivity1) = "node_connections"
degree_connectivity1 = cbind(c(1:n),degree_connectivity1)

degree_connectivity1
```

## Calculate graph filter 

```{r}
A = as.matrix(est_graph_deaths)
p = nrow(A)

#obtain graph Laplacian L1
D = diag(p)
for (i in 1:p){
  d = sum(A[,i])
  D[i,i] = d
}

L1 = D - A

#eigendecomposition of L
L1decomp = eigen(L1)
U1 = as.matrix(L1decomp$vectors)
Lambdas1 = L1decomp$values

#test
#U %*% (diag(p)*Lambdas) %*% t(U)

#Function implementing cutoff tranform for eigenvalues 
cutoff.transform = function(lambdas,q){
  transformed = c()
  cutoff = quantile(lambdas,q)
  for (i in lambdas){
    if(i <= cutoff){
      transformed = c(transformed,i) #keep lambda not 1?
    }
    else{
      transformed = c(transformed,0)
    }
  }
  
  return(transformed)
}

reLu.transform = function(lambdas,beta){
  transformed = c()
  
  for (i in lambdas){
    x = 1 - (beta*i)
    y = max(x,0)
    
    transformed = c(transformed,y)
  }
  
  return(transformed)
}

#quantile(Lambdas,2/3)
transformed.L1 = cutoff.transform(Lambdas1,2/3)
eta.L1 = diag(p)*transformed.L1

#obtain graph dplyr::filter
H1 = U1 %*% eta.L1 %*% t(U1)
H1

gfilter_weight1 = norm((1/7)*H1^2,type = "F")
```

### Create a function to generate heatmap plots of matrices

```{r}
matrix_heatmap = function(matrix,title = "",gradient_zones = c(0,0.5,0.999)){
  r = nrow(matrix)
  df = as_tibble(cbind(expand.grid(rev(seq_len(r)),seq_len(r)),c(matrix))) %>% setNames(c("row","col","value"))
  df$value[df$value == 1] = 0.999
  
  x_min = min(df$row) - 0.5
  x_max = max(df$row) + 0.5
  y_min = min(df$col) - 0.5
  y_max = max(df$col) + 0.5
  
  plot = ggplot(df,mapping = aes(x=row,y=col,fill=value)) + geom_tile() + 
    geom_rect(aes(xmin = x_min, xmax = x_max, ymin = y_min, ymax = y_max),
    fill = NA, color = "black", inherit.aes = FALSE) + 
    scale_fill_gradientn(colors = c("white","lightblue","darkblue"),
                       values = rescale(gradient_zones),
                       limits = c(0, 0.99),
                       oob = squish) + ggtitle(title) + theme_void() + 
    theme(plot.margin = margin(t = 10, r = 30, b = 10, l = 10),legend.key.size = unit(1,"cm"))
  
  return(plot)
}
```

## Calculate time kernel K_time

```{r}
time_kernel = function(time_span,rho_rbf,rho_periodic,sigma2){
  K_time = matrix(NA,nrow = time_span, ncol = time_span)
  
  for (i in 1:time_span){
    for (j in 1:time_span){
      # K_time[i,j] = exp(- (abs(i-j)^2) / (2*rho)) * sigma2
      
      K_time[i,j] = exp(- (abs(i-j)^2) / (2*rho_rbf)) * exp(- (2*sin(sum(abs(i-j))*pi/12)^2)
                     / (rho_periodic)) * sigma2
    }
  }
  
  return(K_time)
}

#Calculating gram matrix K_time
K_time = time_kernel(time_span = t,rho_rbf = 1, 
                      rho_periodic = 1, sigma2 = 1)

#Heatmap of resulting K 
matrix_heatmap(K_time,title = "K_time heatmap")

#Calculate trace norm of gram matrix
K_time_weight = norm((1/t)*K_time,type = "F")
```

### Ensuring precision matrix is not computationally singular, so we jitter eigenvalues, using reciprocal condition number as constraint

```{r}
desingularize = function(covmatrix,threshold = 1e-2,increment = 0.01){
  
  tracker = 0
  
  while (rcond(covmatrix) <= threshold){
    #Perform spectral decomposition
    ev = eigen(covmatrix)
    L = ev$values
    V = ev$vectors
    
    # #Add a little noise to eigenvalues to bring away from 0
    L = L + increment
    
    # #Add 0.01 to eigenvalues in bottom five percentile to bring away from 0
    # cutoff = quantile(abs(L),0.05)
    # L[which(abs(L) < cutoff)] = L[which(abs(L) < cutoff)] + 0.01
    
    #Calculate new precision matrix 
    covmatrix = V %*% diag(L) %*% t(V)
    
    tracker = tracker + 1
  }
  
  results_list = list(covmatrix,tracker)
  #sprintf("%s iterations of desingularizer applied",tracker)
  return(results_list)
}

# test = desingularize(K_time)
```




## Fit KGR model 

```{r,warning=FALSE}
kgr_model1_deaths = function(dataset, rho_time_rbf = 1, rho_time_periodic = 1, sigma2_time = 1, link=1){
  
  #Calculating gram matrix K_time
   K_time = time_kernel(time_span = t,rho_rbf = rho_time_rbf, 
                        rho_periodic = rho_time_periodic, sigma2 = sigma2_time)
  
  #Heatmap of resulting K 
  K_time_heatmap = matrix_heatmap(K_time,title = "K_time heatmap")
  
  #Calculate trace norm of gram matrix
  K_time_weight = norm((1/t)*K_time,type = "F")
  
  #Calculate proposed kernel
  covGP = kronecker((K_time/t),(H1^2/n))
  
  #Need to ensure precision matrix is not computationally singular i.e det > 0
  covGP_jittered = desingularize(covGP,threshold = 1e-2,increment = 0.1)
  covGP = covGP_jittered[[1]]
  
  inv_covGP = solve(covGP)
  
  #Heatmap of resulting inv_covGP2 
  inv_covGP_heatmap = matrix_heatmap(inv_covGP,title = "")
  
  ###Fit INLA model 
  # kgr_formula1 = excess_deaths ~ -1 + factor(month) + Intercept_1 + Intercept_2 + Intercept_3 + Intercept_4 + 
  #   Intercept_5 + Intercept_6 + Intercept_7 + Intercept_8 + Intercept_9 + f(id2,model = "generic0",Cmatrix = inv_covGP)
  
  kgr_formula1 = excess_deaths ~ -1 + factor(month) + Intercept_1 + Intercept_2 + Intercept_3 + Intercept_4 +
    Intercept_5 + Intercept_6 + Intercept_7 + Intercept_8 + Intercept_9 + f(id2,model = "generic0",Cmatrix = inv_covGP)
  
  model = inla(formula = kgr_formula1,family = "poisson",data = dataset, num.threads = 10,
                  control.compute = list(dic=TRUE,waic=TRUE,
                                         return.marginals.predictor=TRUE),
                  control.inla = list(strategy = "simplified.laplace"),
                  control.predictor = list(compute = TRUE, link = link))
  
  ###Extract relevant information and store in the list
  model_summary <- model$summary.fixed
  bri_hyperpar_summary <- bri.hyperpar.summary(model)
  model_DIC <- model$dic$dic
  model_WAIC <- model$waic$waic
  preds_model <- model$summary.fitted.values
  preds_model <- cbind(dataset$region, dataset$date, preds_model)
  colnames(preds_model) <- c("region", "date", "mean", "sd", "0.025quant", "0.5quant", "0.975quant", "mode")
  marginal_fvs <- model$marginals.fitted.values
  
  #Exponentiating parameter to get better interpretation of estimates 
  multeff <- exp(model$summary.fixed$mean)
  names(multeff) <- model$names.fixed
  
  # #Plot of each parameters' posterior density 
  # mf <- melt(model$marginals.fixed)
  # cf <- spread(mf,Var2,value)
  # names(cf)[2] <- 'parameter'
  # param_plot = ggplot(cf,aes(x=x,y=y)) + geom_line()+facet_wrap(~ parameter, 
  #            scales="free") + geom_vline(xintercept=0) + ylab("density")
  # 
  # #Plot of precision of random effect (main hyperparameter of interest)
  # sden <- data.frame(bri.hyper.sd(model$marginals.hyperpar[[1]]))
  # hyperparam_plot = ggplot(sden,aes(x,y)) + geom_line() + ylab("density") + 
  #            xlab("linear predictor")
  
  #Store the results in the list
  kgr_model1_results = list(
    K_time_heatmap = K_time_heatmap,
    K_time_weight = K_time_weight/(K_time_weight + gfilter_weight1),
    gfilter_weight = gfilter_weight1/(K_time_weight + gfilter_weight1),
    covmatrix = covGP,
    prec = inv_covGP,
    num_jitters = covGP_jittered[[2]],
    prec_heatmap = inv_covGP_heatmap,
    model_summary = model_summary,
    bri_hyperpar_summary = bri_hyperpar_summary,
    exp_effects = multeff,
    # param_plot = param_plot,
    # hyperparam_plot = hyperparam_plot,
    model_DIC = model_DIC,
    model_WAIC = model_WAIC,
    fitted_values = preds_model,
    marg_fitted_values = marginal_fvs
  )
  
  return(kgr_model1_results)
}

#Fit kgr_model1
# deaths_kgrmodel_fit = kgr_model1_deaths(dataset = multimodal_df, rho_time_rbf = 0.0757,
#                                        rho_time_periodic = 0.0015,sigma2_time = 0.0437)
                                        
deaths_kgrmodel_fit = kgr_model1_deaths(dataset = multimodal_df, rho_time_rbf = 1,
                                        rho_time_periodic = 1,sigma2_time = 1)

#Extract DIC and WAIC
deaths_kgrmodel_fit_DIC = deaths_kgrmodel_fit$model_DIC
deaths_kgrmodel_fit_WAIC = deaths_kgrmodel_fit$model_WAIC

#Get summaries of parameter estimates
deaths_kgrmodel_fit$model_summary
deaths_kgrmodel_fit$bri_hyperpar_summary
deaths_kgrmodel_fit$exp_effects
deaths_kgrmodel_fit$K_time_weight
deaths_kgrmodel_fit$gfilter_weight
deaths_kgrmodel_fit$num_jitters

#Show plots
# deaths_kgrmodel_fit$K_time_heatmap
# deaths_kgrmodel_fit$prec_heatmap
deaths_kgrmodel_fit$param_plot
deaths_kgrmodel_fit$hyperparam_plot
# pp_insample_plot(response = multimodal_df$excess_deaths,pred_data = deaths_kgrmodel_fit$fitted_values)

for (i in 1:n){
  df = multimodal_df %>% dplyr::filter(region == regions[i]) %>% select(excess_deaths,Year)
  preds = deaths_kgrmodel_fit$fitted_values %>% dplyr::filter(region == regions[i])
  df = cbind(df,preds)
  df = df %>% arrange(date) %>% mutate(time = c(1:nrow(df)))
  
  title = regions[i]
  
  post_pred_plot = df %>% ggplot(aes(x=time,y=excess_deaths)) + geom_point() + 
    geom_line(aes(y=mean),color = "red") + geom_ribbon(aes(ymin = `0.025quant`,ymax = `0.975quant`),alpha = 0.3) + ggtitle(title) + theme_classic()
  print(post_pred_plot)
}
```

## One step ahead rolling forecast

```{r,warning=FALSE,echo=FALSE,cache=TRUE}
inv_covGP_deaths = deaths_kgrmodel_fit$prec

starting_data_deaths = multimodal_df[1:1035,] #1035 for last 7 days 
rownames(starting_data_deaths) = NULL
starting_data_deaths$lower = NA
starting_data_deaths$upper = NA

starting_data_deaths = starting_data_deaths %>% select(region,id2,excess_deaths,cumpctdelta_temp,time,month,Intercept_1,Intercept_2,
                                                       Intercept_3,Intercept_4,Intercept_5,Intercept_6,
                                                       Intercept_7,Intercept_8,Intercept_9,lower,upper)

MAE = c()
MAPE = c()
RMSPE = c()

death_rolling_forecast_mdists = list()
death_rolling_forecast_covGPs = list()

iteration = 1

while(max(starting_data_deaths$time) < 122){
  
  ###Attach df for next month with NAs in response
  end = nrow(starting_data_deaths)
  region = starting_data_deaths$region[1:9]
  id2 = (starting_data_deaths$id2[end]+1):(starting_data_deaths$id2[end]+n)
  excess_deaths = rep(NA,n)
  cumpctdelta_temp = multimodal_df$cumpctdelta_temp[(end+1):(end+9)]
  lower = rep(NA,n)
  upper = rep(NA,n)
  time = rep(starting_data_deaths$time[end]+1,each=n)
  month = rep(9,n)
  Intercept_1 = c(NA,NA,NA,1,NA,NA,NA,NA,NA)
  Intercept_2 = c(NA,NA,NA,NA,1,NA,NA,NA,NA)
  Intercept_3 = c(NA,NA,NA,NA,NA,NA,NA,NA,1)
  Intercept_4 = c(NA,1,NA,NA,NA,NA,NA,NA,NA)
  Intercept_5 = c(NA,NA,NA,NA,NA,NA,NA,1,NA)
  Intercept_6 = c(1,NA,NA,NA,NA,NA,NA,NA,NA)
  Intercept_7 = c(NA,NA,1,NA,NA,NA,NA,NA,NA)
  Intercept_8 = c(NA,NA,NA,NA,NA,1,NA,NA,NA)
  Intercept_9 = c(NA,NA,NA,NA,NA,NA,1,NA,NA)

  new_data = data.frame(region,id2,excess_deaths,cumpctdelta_temp,time,month,Intercept_1,Intercept_2,
                        Intercept_3,Intercept_4,Intercept_5,Intercept_6,Intercept_7,
                        Intercept_8,Intercept_9,lower,upper)
  
  starting_data_deaths = rbind(starting_data_deaths,new_data)
  starting_data_deaths$month = factor(starting_data_deaths$month)
  
  #Calculate covGP for one step ahead forecast
  K_time_insample = time_kernel(time_span = 116, rho_rbf = 0.0757,
                                       rho_periodic = 0.0015,sigma2 = 0.0437)

  # K_time_insample = time_kernel(time_span = 116, rho_rbf = 1,
  #                               rho_periodic = 1,sigma2 = 1)
  
  covGP_insample = kronecker((K_time_insample/t),(H1^2/n))
  
  #Need to ensure precision matrix is not computationally singular i.e det > 0
  covGP_jittered = desingularize(covGP_insample,threshold = 1e-2,increment = 0.1)
  covGP_insample = covGP_jittered[[1]]
  death_rolling_forecast_covGPs[[iteration]] = covGP_insample
    
  inv_covGP_insample = solve(covGP_insample)

  ###Fit KGR model
  kgr_formula1 = excess_deaths ~ -1 + factor(month) + Intercept_1 + Intercept_2 + Intercept_3 + 
    Intercept_4 + Intercept_5 + Intercept_6 + Intercept_7 + Intercept_8 + Intercept_9 + 
    f(id2,model = "generic0",Cmatrix = inv_covGP_insample)
  
  insample_data = starting_data_deaths[(end-1034):(end+9),]
  insample_data$id2 = c(1:nrow(insample_data))
  
  kgr1_model = inla(formula = kgr_formula1,family = "poisson",data = insample_data, num.threads = 10,
                  control.compute = list(dic=TRUE,waic=TRUE,
                                         return.marginals.predictor=TRUE),
                  control.inla = list(strategy = "simplified.laplace"),
                  control.predictor = list(compute = TRUE, link = 1))

  preds_kgr_model = kgr1_model$summary.fitted.values
  
  mfvs_range = length(kgr1_model$marginals.fitted.values)
  death_rolling_forecast_mdists = c(death_rolling_forecast_mdists,kgr1_model$marginals.fitted.values[(mfvs_range-8):mfvs_range])
  
  ###Append KGR model predictions to starting data
  preds_kgr_model$mean = round(preds_kgr_model$mean)
  end2 = nrow(preds_kgr_model)

  pred_mean = preds_kgr_model$mean[(end2-(n-1)):end2]
  pred_lower = preds_kgr_model$`0.025quant`[(end2-(n-1)):end2]
  pred_upper = preds_kgr_model$`0.975quant`[(end2-(n-1)):end2]
  
  starting_data_deaths$excess_deaths[(end+1):(end+n)] = pred_mean    #replace observations with fitted values?
  starting_data_deaths$lower[(end+1):(end+n)] = pred_lower
  starting_data_deaths$upper[(end+1):(end+n)] = pred_upper
  

  saveRDS(death_rolling_forecast_mdists,"death_rolling_forecast_mdists2.rds")
  saveRDS(death_rolling_forecast_covGPs,"death_rolling_forecast_covGPs2.rds")
  saveRDS(starting_data_deaths,"starting_data_deaths2.rds")
  
  iteration = iteration + 1
  
  ###Calculate performance metrics at each step (avg over all regions)
  est_lambda = rep(1,n)

  for (c in 1:n){
  actual = multimodal_df %>% dplyr::filter(region == regions[c]) %>% data.frame()
  m = max(actual$month)

  actual_m = actual %>% dplyr::filter(month == m) %>% select(excess_deaths)
  est_lambda[c] = mean(actual_m$excess_deaths)
  }
  MAE = c(MAE,mean(abs(est_lambda - pred_mean)))
  MAPE = c(MAPE,mean(abs((est_lambda - pred_mean)/est_lambda)))
  RMSPE = c(RMSPE,sqrt(mean((est_lambda - pred_mean)^2)))
}
```

```{r}
prop_model_error = cbind(MAE,MAPE,RMSPE)
prop_model_error
```

### Plotting the forecasts

```{r,warning=FALSE}
#Plot of posterior predictive estimates (days 116-122) with credible interval bands OVERLAID on response
for (i in 1:n){
  df = multimodal_df %>% dplyr::filter(region == regions[i]) %>% select(excess_deaths)
  preds = starting_data_deaths %>% dplyr::filter(region == regions[i]) 
  colnames(preds)[3] = "mean"
  df = cbind(df,preds)
  
  title = sprintf(regions[i])
  
  post_pred_plot = df %>% ggplot(aes(x=time,y=excess_deaths)) + geom_point() + 
    geom_line(aes(y=mean),color = "red") + geom_ribbon(aes(ymin = lower,ymax = upper),alpha = 0.3) +
    geom_vline(xintercept = 115,linetype = "dashed",color = "blue",linewidth = 1.5) + ggtitle(title) + 
    theme_classic()
  print(post_pred_plot)
}
```


# Avg max temp

```{r}
# ggplot(multimodal_df, aes(x = date, y = cumpctdelta_temp, color = region)) +
#   geom_line() + labs(title = "% Change in Daily Avg Max Temperature by Region",
#        x = "Date", y = "Cumulative Sum of % Change in Temperature") +
#   theme_minimal() +
#   theme(legend.position = "bottom")

# ggplot(multimodal_df, aes(x = date, y = temp_pctdelta)) +
#   geom_line() +
#   facet_wrap(~ region, scales = "free_x") +
#   labs(title = "% Change in Daily Avg Max Temperature by Region",
#        x = "Date", y = "% Change in Temperature") +
#   theme_minimal() +
#   theme(legend.position = "bottom")

ggplot(multimodal_df, aes(x = date, y = avg_max_temp)) +
  geom_line() +
  facet_wrap(~ region, scales = "free_x") +
  labs(title = "Daily Avg Max Temperature by Region",
       x = "Date", y = "Average Max Temperature") +
  theme_minimal() +
  theme(legend.position = "bottom")
```


## Estimate a graph

```{r}
graph_df2 = matrix(nrow = t, ncol = n)

for (i in 1:n){
  region_deaths = multimodal_df %>% dplyr::filter(region == regions[i]) %>% select(avg_max_temp) 
  graph_df2[,i] = region_deaths$avg_max_temp
}

#Graph learning w HUGE
out.glasso = huge(graph_df2,lambda = seq(0.95,0.05,by=-0.05),method="glasso")

glasso.stars = huge.select(out.glasso,criterion = "stars",stars.thresh = 0.1)
glasso.ric = huge.select(out.glasso,criterion = "ric")
glasso.ebic = huge.select(out.glasso,criterion = "ebic")

plot(glasso.stars)
plot(glasso.ric)
plot(glasso.ebic)

est_graph_temp = glasso.ebic$refit
est_graph_temp

#Identify which clusters/nodes are the most connected on the graph i.e. has the most association with the other nodes 
degree_connectivity2= data.frame(colSums(est_graph_temp))
colnames(degree_connectivity2) = "node_connections"
degree_connectivity2 = cbind(c(1:n),degree_connectivity2)

degree_connectivity2
```

## Calculate graph filter

```{r}
A = as.matrix(est_graph_temp)
p = nrow(A)

#obtain graph Laplacian L2
D = diag(p)
for (i in 1:p){
  d = sum(A[,i])
  D[i,i] = d
}

L2 = D - A

#eigendecomposition of L
L2decomp = eigen(L2)
U2 = as.matrix(L2decomp$vectors)
Lambdas2 = L2decomp$values

#test
#U %*% (diag(p)*Lambdas) %*% t(U)

#quantile(Lambdas,2/3)
transformed.L2 = cutoff.transform(Lambdas2,2/3)
eta.L2 = diag(p)*transformed.L2

#obtain graph dplyr::filter
H2 = U2 %*% eta.L2 %*% t(U2)
H2

gfilter_weight2 = norm((1/7)*H2^2,type = "F")
```




## Fit KGR model

```{r,warning=FALSE}
kgr_model1_temp = function(dataset, rho_time_rbf = 1, rho_time_periodic = 1, sigma2_time = 1, link=1){
  
  #Calculating gram matrix K_time
   K_time = time_kernel(time_span = t,rho_rbf = rho_time_rbf, 
                        rho_periodic = rho_time_periodic, sigma2 = sigma2_time)
  
  #Heatmap of resulting K 
  K_time_heatmap = matrix_heatmap(K_time,title = "K_time heatmap")
  
  #Calculate trace norm of gram matrix
  K_time_weight = norm((1/t)*K_time,type = "F")
  
  #Calculate proposed kernel
  covGP = kronecker((K_time/t),(H2^2/n))
  
  #Need to ensure precision matrix is not computationally singular i.e det > 0
  covGP_jittered = desingularize(covGP,threshold = 1e-2,increment = 0.1)
  covGP = covGP_jittered[[1]]
  
  inv_covGP = solve(covGP)
  
  #Heatmap of resulting inv_covGP2 
  inv_covGP_heatmap = matrix_heatmap(inv_covGP,title = "")
  
  ###Fit INLA model 
 # kgr_formula1 = avg_max_temp ~ -1 + Intercept_1 + Intercept_2 + Intercept_3 + Intercept_4 + 
 #   Intercept_5 + Intercept_6 + Intercept_7 + Intercept_8 + Intercept_9 + f(id2,model = "generic0",Cmatrix = inv_covGP)
  
  kgr_formula1 = avg_max_temp ~ -1 + factor(month) + Intercept_1 + Intercept_2 + Intercept_3 + Intercept_4 +
    Intercept_5 + Intercept_6 + Intercept_7 + Intercept_8 + Intercept_9 + f(id2,model = "generic0",Cmatrix = inv_covGP)
  
  model = inla(formula = kgr_formula1,family = "gaussian",data = dataset, num.threads = 10,
                  control.compute = list(dic=TRUE,waic=TRUE,
                                         return.marginals.predictor=TRUE),
                  control.inla = list(strategy = "simplified.laplace"),
                  control.predictor = list(compute = TRUE))
  
  ###Extract relevant information and store in the list
  model_summary <- model$summary.fixed
  bri_hyperpar_summary <- bri.hyperpar.summary(model)
  model_DIC <- model$dic$dic
  model_WAIC <- model$waic$waic
  preds_model <- model$summary.fitted.values
  preds_model <- cbind(dataset$region, dataset$date, preds_model)
  colnames(preds_model) <- c("region", "date", "mean", "sd", "0.025quant", "0.5quant", "0.975quant", "mode")
  marginal_fvs <- model$marginals.fitted.values
  
  #Exponentiating parameter to get better interpretation of estimates 
  multeff <- exp(model$summary.fixed$mean)
  names(multeff) <- model$names.fixed
  
  # #Plot of each parameters' posterior density 
  # mf <- melt(model$marginals.fixed)
  # cf <- spread(mf,Var2,value)
  # names(cf)[2] <- 'parameter'
  # param_plot = ggplot(cf,aes(x=x,y=y)) + geom_line()+facet_wrap(~ parameter, 
  #            scales="free") + geom_vline(xintercept=0) + ylab("density")
  # 
  # #Plot of precision of random effect (main hyperparameter of interest)
  # sden <- data.frame(bri.hyper.sd(model$marginals.hyperpar[[1]]))
  # hyperparam_plot = ggplot(sden,aes(x,y)) + geom_line() + ylab("density") + 
  #            xlab("linear predictor")
  
  #Store the results in the list
  kgr_model1_results = list(
    K_time_heatmap = K_time_heatmap,
    K_time_weight = K_time_weight/(K_time_weight + gfilter_weight2),
    gfilter_weight = gfilter_weight2/(K_time_weight + gfilter_weight2),
    covmatrix = covGP,
    prec = inv_covGP,
    num_jitters = covGP_jittered[[2]],
    prec_heatmap = inv_covGP_heatmap,
    model_summary = model_summary,
    bri_hyperpar_summary = bri_hyperpar_summary,
    exp_effects = multeff,
    # param_plot = param_plot,
    # hyperparam_plot = hyperparam_plot,
    model_DIC = model_DIC,
    model_WAIC = model_WAIC,
    fitted_values = preds_model,
    marg_fitted_values = marginal_fvs
  )
  
  return(kgr_model1_results)
}

#Fit kgr_model1
# temp_kgrmodel_fit = kgr_model1_temp(dataset = multimodal_df,rho_time_rbf = 91.698,
#                                    rho_time_periodic = 9.8398, sigma2_time = 43.382)

temp_kgrmodel_fit = kgr_model1_temp(dataset = multimodal_df,rho_time_rbf = 1,
                                    rho_time_periodic = 1, sigma2_time = 0.01)

#Extract DIC and WAIC
temp_kgrmodel_fit_DIC = temp_kgrmodel_fit$model_DIC
temp_kgrmodel_fit_WAIC = temp_kgrmodel_fit$model_WAIC

#Get summaries of parameter estimates
temp_kgrmodel_fit$model_summary
temp_kgrmodel_fit$bri_hyperpar_summary
temp_kgrmodel_fit$exp_effects
temp_kgrmodel_fit$K_time_weight
temp_kgrmodel_fit$gfilter_weight
temp_kgrmodel_fit$num_jitters

#Show plots
# temp_kgrmodel_fit$K_time_heatmap
# temp_kgrmodel_fit$prec_heatmap
temp_kgrmodel_fit$param_plot
temp_kgrmodel_fit$hyperparam_plot
# pp_insample_plot(pred_data = temp_kgrmodel_fit$fitted_values)

for (i in 1:n){
  df = multimodal_df %>% dplyr::filter(region == regions[i]) %>% select(avg_max_temp,Year)
  preds = temp_kgrmodel_fit$fitted_values %>% dplyr::filter(region == regions[i])
  df = cbind(df,preds)
  df = df %>% arrange(date) %>% mutate(time = c(1:nrow(df)))
  
  title = regions[i]
  
  post_pred_plot = df %>% ggplot(aes(x=time,y=avg_max_temp)) + geom_point() + 
    geom_line(aes(y=mean),color = "red") + geom_ribbon(aes(ymin = `0.025quant`,ymax = `0.975quant`),alpha = 0.3) + ggtitle(title) + theme_classic()
  print(post_pred_plot)
}
```

## One step ahead rolling forecast

```{r,warning=FALSE,echo=FALSE,cache=TRUE}
inv_covGP_temp = temp_kgrmodel_fit$prec

starting_data_temp = multimodal_df[1:1035,] #1035 for last 7 days 
rownames(starting_data_temp) = NULL
starting_data_temp$lower = NA
starting_data_temp$upper = NA

starting_data_temp = starting_data_temp %>% select(region,id2,avg_max_temp,cumdelta_deaths,
                                                   time,month,Intercept_1,Intercept_2,Intercept_3,
                                                   Intercept_4,Intercept_5,Intercept_6,Intercept_7,
                                                   Intercept_8,Intercept_9,lower,upper)

MAE2 = c()
MAPE2 = c()
RMSPE2 = c()

temp_rolling_forecast_mdists = list()
temp_rolling_forecast_covGPs = list()

iteration = 1

while(max(starting_data_temp$time) < 122){
  
  ###Attach df for next month with NAs in response
  end = nrow(starting_data_temp)
  region = starting_data_temp$region[1:9]
  id2 = (starting_data_temp$id2[end]+1):(starting_data_temp$id2[end]+n)
  avg_max_temp = rep(NA,n)
  cumdelta_deaths = multimodal_df$cumdelta_deaths[(end+1):(end+9)]
  lower = rep(NA,n)
  upper = rep(NA,n)
  time = rep(starting_data_temp$time[end]+1,each=n)
  month = rep(9,n)
  Intercept_1 = c(NA,NA,NA,1,NA,NA,NA,NA,NA)
  Intercept_2 = c(NA,NA,NA,NA,1,NA,NA,NA,NA)
  Intercept_3 = c(NA,NA,NA,NA,NA,NA,NA,NA,1)
  Intercept_4 = c(NA,1,NA,NA,NA,NA,NA,NA,NA)
  Intercept_5 = c(NA,NA,NA,NA,NA,NA,NA,1,NA)
  Intercept_6 = c(1,NA,NA,NA,NA,NA,NA,NA,NA)
  Intercept_7 = c(NA,NA,1,NA,NA,NA,NA,NA,NA)
  Intercept_8 = c(NA,NA,NA,NA,NA,1,NA,NA,NA)
  Intercept_9 = c(NA,NA,NA,NA,NA,NA,1,NA,NA)

  new_data = data.frame(region,id2,avg_max_temp,cumdelta_deaths,time,month,
                        Intercept_1,Intercept_2,Intercept_3,Intercept_4,Intercept_5,Intercept_6,Intercept_7,
                        Intercept_8,Intercept_9,lower,upper)
  starting_data_temp = rbind(starting_data_temp,new_data)
  starting_data_temp$month = factor(starting_data_temp$month)
  
  #Calculate covGP for one step ahead forecast
  K_time_insample = time_kernel(time_span = 116, rho_rbf = 91.698,
                                   rho_periodic = 9.8398, sigma2 = 43.382)

  # K_time_insample = time_kernel(time_span = 116, rho_rbf = 1,
  #                               rho_periodic = 1, sigma2 = 1)
  
  covGP_insample = kronecker((K_time_insample/t),(H2^2/n))
  
  #Need to ensure precision matrix is not computationally singular i.e det > 0
  covGP_jittered = desingularize(covGP_insample,threshold = 1e-2,increment = 0.1)
  covGP_insample = covGP_jittered[[1]]
  temp_rolling_forecast_covGPs[[iteration]] = covGP_insample
    
  inv_covGP_insample = solve(covGP_insample)
  
  ###Fit KGR model
  kgr_formula1 = avg_max_temp ~ -1 + factor(month) + Intercept_1 + Intercept_2 + Intercept_3 + Intercept_4 + 
    Intercept_5 + Intercept_6 + Intercept_7 + Intercept_8 + Intercept_9 +  
    f(id2,model = "generic0",Cmatrix = inv_covGP_insample)
  
  insample_data = starting_data_temp[(end-1034):(end+9),]
  insample_data$id2 = c(1:nrow(insample_data))
  
  kgr1_model = inla(formula = kgr_formula1,family = "gaussian",data = insample_data, num.threads = 10,
                  control.compute = list(dic=TRUE,waic=TRUE,return.marginals.predictor=TRUE),
                  control.inla = list(strategy = "simplified.laplace"),
                  control.predictor = list(compute = TRUE, link = 1))
  
  preds_kgr_model = kgr1_model$summary.fitted.values
  
  mfvs_range = length(kgr1_model$marginals.fitted.values)
  temp_rolling_forecast_mdists = c(temp_rolling_forecast_mdists,kgr1_model$marginals.fitted.values[(mfvs_range-8):mfvs_range])
  
  ###Append KGR model predictions to starting data
  end2 = nrow(preds_kgr_model)

  pred_mean = preds_kgr_model$mean[(end2-(n-1)):end2]
  pred_lower = preds_kgr_model$`0.025quant`[(end2-(n-1)):end2]
  pred_upper = preds_kgr_model$`0.975quant`[(end2-(n-1)):end2]
  
  starting_data_temp$avg_max_temp[(end+1):(end+n)] = pred_mean
  starting_data_temp$lower[(end+1):(end+n)] = pred_lower
  starting_data_temp$upper[(end+1):(end+n)] = pred_upper
  
  saveRDS(temp_rolling_forecast_mdists,"temp_rolling_forecast_mdists2.rds")
  saveRDS(temp_rolling_forecast_covGPs,"temp_rolling_forecast_covGPs2.rds")
  saveRDS(starting_data_temp,"starting_data_temp2.rds")
  
  iteration = iteration + 1
  
  ###Calculate performance metrics at each step (avg over all regions)
  actuals = rep(NA,n)
  t = unique(time)

  for (c in 1:n){
  actual = multimodal_df %>% dplyr::filter(region == regions[c],time == t) %>% select(avg_max_temp)
  actuals[c] = actual$avg_max_temp
  }
  
  MAE2 = c(MAE2,mean(abs(actuals - pred_mean)))
  MAPE2 = c(MAPE2,mean(abs((actuals - pred_mean)/actuals)))
  RMSPE2 = c(RMSPE2,sqrt(mean((actuals - pred_mean)^2)))
}
```

```{r}
prop_model_error2 = cbind(MAE2,MAPE2,RMSPE2)
prop_model_error2
```

### Plotting the forecasts

```{r,warning=FALSE}
#Plot of posterior predictive estimates (days 116-122) with credible interval bands OVERLAID on response
for (i in 1:n){
  df = multimodal_df %>% dplyr::filter(region == regions[i]) %>% select(avg_max_temp)
  preds = starting_data_temp %>% dplyr::filter(region == regions[i]) 
  colnames(preds)[3] = "mean"
  df = cbind(df,preds)
  
  title = sprintf(regions[i])
  
  post_pred_plot = df %>% ggplot(aes(x=time,y=avg_max_temp)) + geom_point() + 
    geom_line(aes(y=mean),color = "red") + geom_ribbon(aes(ymin = lower,ymax = upper),alpha = 0.3) +
    geom_vline(xintercept = 115,linetype = "dashed",color = "blue",linewidth = 1.5) + ggtitle(title) + 
    theme_classic()
  print(post_pred_plot)
}
```


```{r,eval = FALSE}
save.image("Multimodal-KGR-2-4.24.RData")
```

